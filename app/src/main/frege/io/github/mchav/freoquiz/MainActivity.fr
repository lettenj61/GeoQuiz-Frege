module io.github.mchav.freoquiz.MainActivity where

import froid.app.Activity
import froid.content.Context
import froid.view.View
import froid.widget.Button
import froid.widget.TextView
import froid.widget.Toast

import io.github.mchav.freoquiz.CheatActivity as CheatActivity()

import Data.List

native module type Activity where {}

requestCheatCode :: Int
requestCheatCode = 0

pure native activityMain "io.github.mchav.freoquiz.R.layout.activity_main" :: Int
pure native btnPrevId "io.github.mchav.freoquiz.R.id.btnPrev" :: Int
pure native btnNextId "io.github.mchav.freoquiz.R.id.btnNext" :: Int
pure native btnFalseId "io.github.mchav.freoquiz.R.id.btnFalse" :: Int
pure native btnTrueId "io.github.mchav.freoquiz.R.id.btnTrue" :: Int
pure native btnCheatId "io.github.mchav.freoquiz.R.id.btnCheat" :: Int
pure native questionText "io.github.mchav.freoquiz.R.id.question_text" :: Int

data Question = Question { text :: String, answer :: Bool }

questions :: [Question]
questions = [ Question { text = "The Pacific Ocean is larger than the Atlantic Ocean", answer = True}
            , Question { text = "The Suez Canal connects the Red Sea and the Indian Ocean", answer = False}
            , Question { text = "The source of the Nile river is in Egypt", answer = False}
            , Question { text = "The Amazon river is the longest river in the Americas", answer = True}
            , Question { text = "Lake Baikal is the world\'s oldest and deepest freshwater lake", answer = True}
            , Question { text = "The capital of Zimbabwe is Bulawayo", answer = False}
            , Question { text = "Ghana is Africa\'s fastest growing economy", answer = True}]

nextQuestion :: String -> String
nextQuestion !q = maybe q id (lookup q (sequenceQuestions questions))

previousQuestion :: String -> String
previousQuestion !q = maybe q id (lookup q (sequenceQuestions (reverse questions) ))

sequenceQuestions :: [Question] -> [(String, String)]
sequenceQuestions qs = zip (questionStrings) ((tail questionStrings) ++ [head questionStrings])
            where questionStrings = map (\x -> x.text) qs

handler :: MutableIO Context -> MutableIO TextView -> Bool -> MutableIO View -> IO ()
handler c tv b v = do
    q <- liftM (\cs -> cs.toString) tv.getText
    let ans = maybe False id (fmap (\x -> x.answer) (find (\x -> x.text == q) questions))
    let toastText = if ans == b then "You got it right!" else "Wrong!"
    sb <- Toast.makeText c toastText Toast.lengthShort
    sb.show
    tv.setText (nextQuestion q)

cheatHandler :: MutableIO Activity -> MutableIO Context -> MutableIO TextView -> MutableIO View -> IO ()
cheatHandler this c tv v = do
    q <- liftM (\cs -> cs.toString) tv.getText
    let ansIsTrue = maybe False id (fmap (\x -> x.answer) (find (\x -> x.text == q) questions))
    i <- CheatActivity.newIntent c ansIsTrue
    this.startActivityForResult i requestCheatCode

navigationHandler :: MutableIO Context -> MutableIO TextView -> Bool -> MutableIO View -> IO ()
navigationHandler c tv b v = do
    q <- liftM (\cs -> cs.toString) tv.getText
    if b == True then tv.setText (nextQuestion q) else tv.setText (previousQuestion q)

onCreate :: MutableIO Activity -> IO ()
onCreate this = do
	context <- this.getApplicationContext
	this.setContentView activityMain
	txt <- asTextView this questionText
	buttons <- mapM this.findViewById [btnFalseId, btnTrueId, btnNextId, btnPrevId, btnCheatId]
	zipWithM setOnClick buttons [(handler context txt False), (handler context txt True), (navigationHandler context txt True), (navigationHandler context txt False), (cheatHandler this context txt)]
	txt.setText ((head questions).text)

